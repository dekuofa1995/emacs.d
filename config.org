:PROPERTIES:
:header-args: :tangle init.el
:END:
#+title: My Own Emacs configuration
#+author: dekuofa1995
#+auto_tangle: t

* TODO Completion
* My Functions
** Load init.el file
#+begin_src emacs-lisp
  (setq user-init-file "~/.config/emacs/init.el")
  (defun load-init-file ()
    (interactive)
    (load-file user-init-file)
    (server-start))
#+end_src

* Emacs
** Auto Revert Buffer
When buffer's corresponding file changed, then emacs auto revert the buffer.
#+begin_src emacs-lisp
(global-auto-revert-mode 1) ;; Revert buffers when the underlying file has changed
(setq global-auto-revert-non-file-buffers t) ; automatically refreshed when files get added or deleted from the directory you are browsing
#+end_src

** Load Customization
#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)
#+end_src

** Handle Error
#+begin_src emacs-lisp
(setq debug-on-error t)
#+end_src

** Elisp Load Path
#+begin_src emacs-lisp
(add-to-list 'load-path
               "~/.emacs.d/elisp/")
#+end_src
** Show Eshell and Shell on Bottom Window
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\`\\*e?shell\\*\\(?:<[[:digit:]]+>\\)?\\'"
               (display-buffer-in-side-window (side . bottom))))
#+end_src
** Confirm prompts
#+begin_src emacs-lisp
  (setq use-short-answer 'y-or-n-p) 
#+end_src
** Package Manager
*** Straight && Use-Package
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)

#+end_src
**** Use-Package
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src


* Editor
+ ~save-place-mode~: save the last cursor location for each file.
  

#+begin_src emacs-lisp
  (save-place-mode 1) ;; remember the file's last cursor location
  (recentf-mode 1)    ;; remember recent open file
  ;; (icomplete-mode t)  ;; 
  (savehist-mode 1)   ;; remember the things you've entered into prompts the next time you use them
  (save-place-mode 1) ;; remember the last cursor location
#+end_src
* Org
org configuration
#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src
** Org Journal
#+begin_src emacs-lisp
  (use-package org-journal)
#+end_src

** Org Agenda

*** Org Super Agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :init
    (setq org-super-agenda-groups
          '(
            (:name "TODAY"
                   :time-grid t
                   : todo "TODAY")
            (:name "Important"
                   :tag "" ;; ??
                   :priority "A")
            (:order-multi (2 (:name "English Grammar"
                                    :tag "grammar")
                             (:name "Emacs"
                                    (or (:tag "emacs" :tag "elisp")))
                             (:name "SICP"
                                    :tag "sicp")
                             (:name "Personal"
                                    :habit t
                                    :tag "personal")))
            (:todo "WATING" :order 8)
            (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING" "WANT")
                   :order 9)
            (:prioprity<= "B"
                          :order 1)
            ))
          ;; org-agenda-file-regexp "(\\`[^.].*\\.org\\')|(diary)")
    (setq org-agenda-span 'day
          org-agenda-file-regexp "(\\`[^.].*\\.org\\')|(diary)")

    (org-agenda nil "a")
    :config
    (setq org-agenda-files (list "~/.config/emacs/" org-journal-dir "~/.emacs.d/"))
    (org-super-agenda-mode 1)
    )
#+end_src

** Org Superstar
Prettify headings and plain lists in Org mode.
+ ~?\s~: Make leading stars turely invisible, by rendering them as spaces.
  
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :init
    (setq org-superstar-leading-bullet ?\s
          org-superstar-leading-fallback ?\s
          org-hide-leading-starts nil
          org-superstar-todo-bullet-alist
          '(("TODO" . 9744)
            ("[ ]" . 9744)
            ("DONE" . 9745)
            ("[x]" . 9745)))
    )

#+end_src

** Auto Tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src


** Org-babel
*** Ob-racket
#+begin_src emacs-lisp
(use-package ob-racket
  :after org
  :straight '(ob-racket
	      :type git
	      :host github
	      :repo "DEADB17/ob-racket"
	      :files ("ob-racket.el"))
  :init
  (setq org-babel-command:racket "/usr/local/bin/racket")
  :config
  ;; (append '((racket . t) (scribble .t)) org-babel-load-languages)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((racket . t)))
)
#+end_src

** Org-Roam
#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-directory (file-truename "~/Roam-Notes"))
  (setq find-file-visit-truename t)) ;; enable symbolic links using in roam, performance cost
#+end_src

* Theme
** Active Themes
#+begin_src emacs-lisp
  (setq my/emacs-theme 'doom-palenight)
#+end_src

** Doom Themes
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme my/emacs-theme t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* UI
** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

** Modeline

*** Doom Modeline
+ ~find-file-visit-truename~: show the file truename when open a symbolink
+ ~doom-modeline-github-inverval~: the interval of checking github. (* 30 60) 
**** Configuration
- [ ] hook init not working
#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    ;; :hook
    ;; (after-init . doom-modeline-mode)
    :config
    (print "doom-modeline")
    ;; unused modeline items:  indent-info
    (doom-modeline-def-modeline 'my-mode-line
      '(bar " " modals window-number matches buffer-info remote-host buffer-position parrot selection-info)
      '(misc-info objed-state battery grip irc mu4e gnus
                  github debug lsp minor-modes input-method
                  word-count buffer-encoding major-mode process vcs checker time))

    (defun my/setup-custom-doom-modeline ()
      (print "setup my modeline")
      (doom-modeline-set-modeline 'my-mode-line 'default))

    (add-hook 'doom-modeline-mode-hook 'my/setup-custom-doom-modeline)

    (setq
     find-file-visit-truename t
     doom-modeline-github t
     doom-modeline-enable-word-count t
     doom-modeline-height 1)

    (custom-set-faces
     '(mode-line ((t (:height 0.9))))
     '(mode-line-active ((t (:height 0.9))))
     '(mode-line-inactive ((t (:height 0.9)))))

    )
#+end_src

** Font
#+begin_src emacs-lisp
(when (window-system)
  (set-frame-font "Fira Code"))
#+end_src

*** Fira Code Support
#+begin_src emacs-lisp
(let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
               (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
               (36 . ".\\(?:>\\)")
               (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
               (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
               (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
               (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
               (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
               (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
               (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
               (48 . ".\\(?:x[a-zA-Z]\\)")
               (58 . ".\\(?:::\\|[:=]\\)")
               (59 . ".\\(?:;;\\|;\\)")
               (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
               (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
               (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
               (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
               (91 . ".\\(?:]\\)")
               (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
               (94 . ".\\(?:=\\)")
               (119 . ".\\(?:ww\\)")
               (123 . ".\\(?:-\\)")
               (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
               (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
               )
             ))
  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))

#+end_src

** Base Config
#+begin_src emacs-lisp
  ;; Face attribute
  (set-face-attribute 'default nil :height 180)
  ;; Disabled modes
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 8)
  (display-line-numbers-mode 1)                   ;; line numebr
  (column-number-mode)                             ;; column-number
#+end_src

* Key Bindings
** Global Key Bindings
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** MacOS use Option as Meta
#+begin_src  emacs-lisp
(setq mac-option-key-is-meta t)
(setq mac-option-modifier 'meta)
#+end_src

* Productity
** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :init
  (setq rainbow-delimiters-mode 1))
#+end_src

** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-n" . ivy-next-line)
	 ("C-p" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-p" . ivy-previous-line)
	 ("C-n" . ivy-next-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-p" . ivy-previous-line)
	 ("C-n" . ivy-next-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode t))
#+end_src
*** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-ibuffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :init
    (setq ivy-initial-inputs-alist nil)
    )
#+end_src

*** ivy-rich
Enhance ~ivy~ and ~counsel~ package for showing more information about selections.
+ ivy-rich-path-style: replace "/Users/username" with "~"
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (setq ivy-rich-path-style 'abbrev)
    :config
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src
** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Packages
Manage the Third Part Packages.
** Change built in package to Straight.el and Use-package.el
#+begin_src elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
#+end_src
** Company
Complete for Emacs
#+begin_src emacs-lisp
(use-package company
  ;; default bindings M-n/p next/prev, <return> complete or <tab> to cimplete the common part
  ;; use M+digit to quickly complete with one of the first 10 candidates
  :config
  (add-hook 'after-init-hook 'global-company-mode);; use company in all buffers
  )
#+end_src

** Yasnippet
+ yas-indent-line: when use org-mode with source block, it will auto indent snippet after the snippet created,
  and then cause nil-mode error.
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets"
            "~/.emacs.d/straight/repos/yasnippet-snippets/snippets")
          
          yas-indent-line nil)
    :config
    (yas-reload-all)
    (yas-global-mode 1))

  (use-package yasnippet-snippets)
#+end_src

** Meow
*** Indicator Customization

*** Overwrite Key Bindings
#+begin_src emacs-lisp

  (defun my/overwrite-key-bindings-setup ()
    (declare-function meow-motion-overwrite-define-key "meow")
    (meow-motion-overwrite-define-key
     ;; Use e to move up, n to move down.
     ;; Since special modes usually use n to move down, we only overwrite e here.
     '("e" . meow-prev) 
     '("<escape>" . ignore)))
#+end_src

*** Leader Key Bindings
#+begin_src emacs-lisp

  (defun my/leader-key-bindings-setup ()
    (declare-function meow-leader-define-key "meow")
    (meow-leader-define-key
     '("?" . meow-cheatsheet)
     ;; To execute the originally e in MOTION state, use SPC e.
     '("'" . meow-wrap-string)
     '("(" . meow-wrap-round)
     '("[" . meow-wrap-square)
     '("{" . meow-wrap-curly)
     '("}" . meow-forward-barf)
     '(")" . meow-forward-slurp)
     '("e" . meow-eval-last-exp)
     '("E" . eldoc-mode)
     '("r" . meow-raise-sexp)
     '("R" . load-init-file)
     '("s" . meow-splice-sexp)
     '("S" . meow-split-sexp)
     '("t" . meow-transpose-sexp)
     '("T" . shell)
     '("j" . meow-join-sexp)
     '("," . meow-pop-marker)
     '("." . meow-find-ref)
     '(";" . meow-comment)
     '("q" . meow-quit)
     '("@ u" . smerge-keep-upper)
     '("@ l" . smerge-keep-lower)
     '("@ a" . smerge-keep-all)
     '("@ m" . smerge-keep-mine)
     '("@ o" . smerge-keep-other)
     '("@ @" . smerge-next)
     '("d" . find-file)
     '("o" . delete-other-windows)
     '("L" . display-line-numbers-modo)
     '("k" . kill-buffer)
     '("w" . ace-window)
     '("W" . ace-swap-window)
     '("o" . delete-other-windows)
     '("q" . delete-window)
     '("v" . magit)
     '("$" . +change-theme)
     '("~" . +reload-theme)
     '("-" . split-window-below)
     '("\\" . split-window-right)
     '("p" . project-find-file)
     '("b" . switch-to-buffer)
     '("a" . deadgrep)
     '("f" . find-file)
     '("i" . imenu)
     '("z" . iedit-mode)
     '("C" . recenter-top-bottom)
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)))

#+end_src
*** Normal Key Bindings
#+begin_src emacs-lisp
  (defun my/normal-key-bindings-setup ()
    (declare-function meow-normal-define-key "meow")
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("1" . meow-expand-1)
     '("2" . meow-expand-2)
     '("3" . meow-expand-3)
     '("4" . meow-expand-4)
     '("5" . meow-expand-5)
     '("6" . meow-expand-6)
     '("7" . meow-expand-7)
     '("8" . meow-expand-8)
     '("9" . meow-expand-9)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("/" . meow-visit)
     '("a" . meow-append)
     '("A" . meow-open-above)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("C" . meow-change-save)
     '("d" . (lambda () (interactive)
               (condition-case nil (scroll-up)
                 (end-of-buffer (goto-char (+ (point-min) (buffer-size)))
                              ))))
     '("D" . (lambda () (interactive)
               (condition-case nil (scroll-down)
                 (end-of-buffer (goto-char (- (point-min) (buffer-size))))
                 )))
     '("e" . meow-prev)
     '("E" . meow-prev-expand)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-right)
     '("I" . meow-right-expand)
     '("j" . meow-join)
     '("k" . meow-kill)
     '("l" . meow-line)
     '("L" . meow-goto-line)
     '("m" . meow-mark-word)
     '("M" . meow-mark-symbol)
     '("n" . meow-next)
     '("N" . meow-next-expand)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("r" . meow-replace)
     '("R" . meow-replace-save)
     '("s" . meow-insert)
     '("S" . meow-open-below)
     '("t" . meow-till)
     '("u" . meow-undo) ;; emacs treats undo as a command, so if you want redo, just undo the previous undo
     '("U" . meow-undo-in-selection)
     '("v" . meow-search)
     '("w" . meow-next-word)
     '("W" . meow-next-symbol)
     '("x" . meow-delete)
     '("X" . meow-backward-delete)
     '("y" . meow-save)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
#+end_src

*** Meow Configuration
#+begin_src emacs-lisp
  (use-package meow
  :defer f ; disable use-package defer load
  :config
  ;; relative number
  (meow-setup-line-number)
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-colemak)
    (my/leader-key-bindings-setup)
    (my/normal-key-bindings-setup)
    ;; (setq meow-selection-command-fallback
    ;; 	  '((meow-replace . meow-yank)
    ;; 	    (meow-meow-line)))
    (my/overwrite-key-bindings-setup)
    )

  (meow-setup))

  (require 'meow)
  (meow-global-mode 1)

#+end_src

** Magit
Emacs's git client
#+begin_src emacs-lisp
(use-package magit)
#+end_src
** Iedit
Multiple Cursorrences in the same way simultaneously.
#+begin_src emacs-lisp
(use-package iedit)
#+end_src
** Deadgrep
Ripgrep in Emacs
#+begin_src emacs-lisp
(use-package deadgrep)
#+end_src
** Ace window
#+begin_src emacs-lisp
(use-package ace-window)
#+end_src

* Languages
** Racket
#+begin_src emacs-lisp
(use-package racket-mode)
#+end_src

** TODO Emacs Lisp
** Format All
#+begin_src emacs-lisp
(use-package format-all
  :config
  (format-all-mode 1))
#+end_src
** Key Frequency
#+begin_src emacs-lisp
(use-package keyfreq
  :init
  (setq keyfreq-excluded-commands
	'(self-insert-command
	  abort-recursive-edit
	  forward-char
	  backward-char
	  previous-line
	  next-line))
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src
** Emacs Everywhere     

- [ ] FIXME every where error with init
 #+begin_src emacs-lisp
   (use-package emacs-everywhere
     :config
     (setq emacs-everywhere-paste-p t))
 #+end_src

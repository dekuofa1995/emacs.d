* Header
#+begin_src emacs-lisp
  ;;; init-completion.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src

* Completion
** Company
*** TODO Company Variables
- [ ] replace by =cape= functions
#+begin_src emacs-lisp
  ;;;###autoload
  (defvar nasy/company-backend-alist
    '((text-mode company-dabbrev company-ispell company-files)
      (prog-mode company-files)
      (conf-mode company-dabbrev-code company-files))
    "An alist matching modes to company backends.

     The backends for any mode is built from this.")

  ;;;###autoload
  (defvar nasy-cape/company
    ;; '(company-tabnine company-yasnippet)
    nil)

#+end_src
*** Company Functions
#+begin_src emacs-lisp
  ;;;###autoload
  (defun nasy/enlist (exp)
    "Return EXP wrapped in a list, or as-is if already a list."
    (declare (pure t) (side-effect-free t))
    (if (listp exp) exp (list exp)))

  ;;;###autoload
  (defun nasy/update-company-backend (modes &rest backends)
    "Prepend BACKENDS (in order) to `company-backends' in MODES.

   MODES should be one symbol or a list of them, representing major or minor modes.
   This will overwrite backends for MODES on consecutive uses.

   If the car of BACKENDS is nil, unset the backends for MODES.
   Examples:
   (nasy/update-company-backend 'js2-mode
     'company-tide 'company-yasnippet)
   (nasy/update-company-backend 'sh-mode
     '(company-shell :with company-yasnippet))
   (nasy/update-company-backend '(c-mode c++-mode)
     '(:separate company-irony-c-headers company-irony))
   (nasy/update-company-backend 'sh-mode nil)  ; unsets backends for `sh-mode'"
   (declare (indent defun))
   (dolist (mode (nasy/enlist modes))
     (if (null (car backends))
         (setq nasy/company-backend-alist
               (delq (assq mode nasy/company-backend-alist)
                     nasy/company-backend-alist))
       (setf (alist-get mode nasy/company-backend-alist)
             (car backends)))))


  ;;;###autoload
  (defun nasy/company-backends ()
    "Get company backends."
    (let (backends)
      (let ((mode major-mode)
            (modes (list major-mode)))
        (while (setq mode (get mode 'derived-mode-parent))
          (push mode modes))
        (dolist (mode modes)
          (dolist (backend  (cdr (assq mode nasy/company-backend-alist)))
            (push backend backends)))
        (delete-dups
         (append (cl-loop for (mode . backends) in nasy/company-backend-alist
                          if (or (eq major-mode mode)  ; major modes
                                (and (boundp mode)
                                   (symbol-value mode))) ; minor modes
                          append backends)
                 (nreverse backends))))))


  ;;;###autoload
  (defun nasy/temp-buffer-p (buf)
    "Return non-nil if BUF is temporary."
    (equal (substring (buffer-name buf) 0 1) " "))

  ;;;###autoload
  (defun nasy/company-init-backends-h ()
    "Set `company-backends' for the current buffer."
    (or (memq major-mode '(fundamental-mode special-mode))
       buffer-read-only
       (nasy/temp-buffer-p (or (buffer-base-buffer) (current-buffer)))
       (setq-local company-backends (nasy/company-backends))))


  ;;;###autoload
  (defun nasy/merge-capf (c)
    "Merge c into completion-at-point-functions."
    (remove-hook 'completion-at-point-functions t t)
    (add-hook 'completion-at-point-functions c 1 'local))


  ;;;###autoload
  (defun nasy/-merge-capf ()
    "Merge nasy capy."
    (require 'cape)
    (let ((nasy-capfs (cape-company-to-capf
                       (apply-partially
                        #'company--multi-backend-adapter
                        (nasy/company-backends)))))
      (nasy/merge-capf nasy-capfs)))


  ;;;###autoload
  (defun nasy/orderless-dispatch-flex-first (_pattern index _total)
    "orderless-flex for corfu."
    (and (eq index 0) 'orderless-flex))


  ;;;###autoload
  (defun nasy/setup-corfu ()
    "Setup corfu."
    (corfu-mode 1)
    (setq-local orderless-matching-styles '(orderless-flex)
                orderless-style-dispatchers nil)
    (add-hook 'orderless-style-dispatchers #'nasy/orderless-dispatch-flex-first nil
              'local))

#+end_src

*** Company Init
Just use =company= backends for =cape=.
#+begin_src emacs-lisp
  (setup company
    (:autoload company--multi-backend-adapter))
#+end_src

** Corfu
  +-----+------------------------+
  |Key  |Action                  |
  +-----+------------------------+
  |Tab  |corfu-complete          |
  +-----+------------------------+
  |C-n  |corfu-next              |
  +-----+------------------------+
  |C-p  |corfu-previous          |
  +-----+------------------------+
  |RET  |corfu-insert            |
  +-----+------------------------+
  |C-v  |corfu-scroll-up         |
  +-----+------------------------+
  |M-v  |corfu-scroll-down       |
  +-----+------------------------+
  |M-h  |corfu-info-documentation|
  +-----+------------------------+
  |C-M-i|completion-at-point     |
  +-----+------------------------+

#+begin_src emacs-lisp
  (setup corfu
    (:hooks (list prog-mode-hook
  		org-mode-hook
  		vterm-mode-hook
  		eval-expression-minibuffer-setup-hook)
  	    nasy/setup-corfu)
    ;; bindings
    ;; tab   corfu-complete
    ;; C-n/p corfu-next/previous
    ;; RET   corfu-insert
    ;; C-v   corfu-scroll-up
    ;; M-v   corfu-scroll-down
    ;; M-h   corfu-info-documentation
    (:global
     "M-/"   completion-at-point
     "C-M-i" complete-symbol)
    (:with-map corfu-map
      (:bind "C-g" corfu-quit
  	   "C-e" corfu-complete-common-or-next)
      (:unbind "<return>"))
    (:option*
     corfu-cycle t
     corfu-auto t
     corfu-preview-current nil
     corfu-auto-delay 0.4
     corfu-auto-prefix 2
     corfu-preview-current nil))
#+end_src

*** corfu-popupinfo
#+begin_src emacs-lisp
  (use-package corfu-popupinfo
    :custom
    (corfu-popupinfo-delay '(0.8 . 0.5))
    :hook (corfu-mode . corfu-popupinfo-mode))
#+end_src

** Cape
Completion At Point Extensions:
- =cape-dabbrev=: word from current buffers (see also =dabbrev-capf= on Emacs 29)
- =cape-file=: file name
- =cape-history=: from Eshell, Comint or minibuffer history
- =cape-keyword=: programming languages keyword
- =cape-symbol=: complete ~elisp~ symbol
- =cape-abbrev=: Complete abbreviation(=add-global-abbrev=, =add-mode-abbrev=)
- =cape-ispell=: Complete word from Ispell dictionay
- =cape-dict=: Complete word from dictionary file
- =cape-line=: Complete entire line from current buffer
- =cape-tex=: Complete Unicode char from TeX command, e.g. =\hbar=
- =cape-sgml=: Complete Unicode char from SGML entity, e.g. =&alpha=.
- =cape-rfc1345=: Complete Unicode char unsing RFC 1345 menemonics
*** TODO Setup Cape
- [ ] merge cape completion functions with company backends.
- [ ] add cape keybindings for specific CAPFs
#+begin_src emacs-lisp
  (setup cape
    (:once (list :before 'corfu-mode)
      (add-hook 'completion-at-point-functions #'cape-file))
    (:hooks corfu-mode-hook nasy/-merge-capf)
    (:global
     "M-/" completion-at-point)
    (:when-loaded
      (setq completion-at-point-functions
            (list (cape-capf-buster (cape-company-to-capf
                                     (apply-partially
                                      #'company--multi-backend-adapter
                                      nasy-cape/company)))))))
#+end_src

** TODO Orderless
*** Setup
#+begin_src emacs-lisp
  (setup orderless
    (:once (list :packages 'vertico)
      (require 'orderless))
    (:option* completion-styles '(prescient orderless))
    (:after 'consult
      (defun consult--orderless-regexp-compiler (input type &rest _config)
        (let
            (( input (orderless-pattern-compiler input)))
          (cons
           (mapcar (lambda (r) (consult--convert-regexp r type)) input)
           (lambda (str) (orderless--highlight input str)))))

      (defun consult--with-orderless (&rest args)
        (minibuffer-with-setup-hook
            (lambda ()
              (setq-local consult--regexp-compiler #'consult--orderless-regexp-compiler))
          (apply args)))
      ;; add
      (let
  	((override-commands '(consult-ripgrep consult-find)))
        (dolist (cmd override-commands)
  	(advice-add cmd :around #'consult--with-orderless)))))
#+end_src
*** COMMENT Older Setup
- [ ] clean orderless configuration.
#+begin_src emacs-lisp
  (use-package orderless
    :demand t
    :init
    (with-eval-after-load 'consult
      (require 'orderless)
      (defun +orderless--consult-suffix ()
        "Regexp which matches the end of string with Consult tofu support."
        (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
            (format "[%c-%c]*$"
                    consult--tofu-char
                    (+ consult--tofu-char consult--tofu-range -1))
          "$"))

      ;; Recognizes the following patterns:
      ;; * .ext (file extension)
      ;; * regexp$ (regexp matching at end)
      (defun +orderless-consult-dispatch (word _index _total)
        (cond
         ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
         ((string-suffix-p "$" word)
          `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
         ;; File extensions
         ((and (or minibuffer-completing-file-name
                   (derived-mode-p 'eshell-mode))
               (string-match-p "\\`\\.." word))
          `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))
      (orderless-define-completion-style +orderless-with-initialism
        (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))
      (setq completion-styles '(orderless partial-completion basic)
            completion-category-defaults nil
          ;;; Enable partial-completion for files.
          ;;; Either give orderless precedence or partial-completion.
          ;;; Note that completion-category-overrides is not really an override,
          ;;; but rather prepended to the default completion-styles.
            ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
            completion-category-overrides '((file (styles . (partial-completion))) ;; partial-completion is tried first
                                            ;; enable initialism by default for symbols
                                            (command (styles +orderless-with-initialism))
                                            (variable (styles +orderless-with-initialism))
                                            (symbol (styles +orderless-with-initialism)))
            orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
            orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                              #'orderless-affix-dispatch))))
#+end_src

* Footer
#+begin_src emacs-lisp
(provide 'init-completion)
;;; init-completion.el ends here
#+end_src

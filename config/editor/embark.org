* Header
#+begin_src emacs-lisp
  ;;; init-embark.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src

* Embark

** Initialization
#+begin_src emacs-lisp
  (setup embark
    (:after 'consult
      (require 'embark))
    (:global
     "C-."   embark-act
     "C-h B" embark-bindings ;; alternative for `describe-bindings'
     "C-M-'" embark-dwim)
    ;; :init
    ;; for integration with `which-key'
    ;; see https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt
    ;; (setq prefix-help-command #'embark-prefix-help-command)
    (:when-loaded
      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
  		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none)))))
    (:with-feature which-key
      (defun embark-which-key-indicator ()
        "An embark indicator that displays keymaps using which-key.
    The which-key help message will show the type and value of the
    current target followed by an ellipsis if there are further
    targets."
        (lambda (&optional keymap targets prefix)
          (if (null keymap)
              (which-key--hide-popup-ignore-command)
            (which-key--show-keymap
             (if (eq (plist-get (car targets) :type) 'embark-become)
                 "Become"
               (format "Act on %s '%s'%s"
                       (plist-get (car targets) :type)
                       (embark--truncate-target (plist-get (car targets) :target))
                       (if (cdr targets) "â€¦" "")))
             (if prefix
                 (pcase (lookup-key keymap prefix 'accept-default)
                   ((and (pred keymapp) km) km)
                   (_ (key-binding prefix 'accept-default)))
               keymap)
             nil nil t (lambda (binding)
                         (not (string-suffix-p "-argument" (cdr binding))))))))

      (setq embark-indicators
            '(embark-which-key-indicator
              embark-highlight-indicator
              embark-isearch-highlight-indicator))

      (defun embark-hide-which-key-indicator (fn &rest args)
        "Hide the which-key indicator immediately when using the completing-read prompter."
        (which-key--hide-popup-ignore-command)
        (let ((embark-indicators
               (remq #'embark-which-key-indicator embark-indicators)))
          (apply fn args)))

      (advice-add #'embark-completing-read-prompter
                  :around #'embark-hide-which-key-indicator)))
#+end_src

** Consult Integration
#+begin_src emacs-lisp
  (setup embark-consult
    (:once (list :packages 'embark)
      (require 'embark-consult))
    (:hooks
      embark-collect-mode-hook consult-preview-at-point-mode))
#+end_src

** COMMENT Show the current Embark target types in the modeline
#+begin_src emacs-lisp
  (with-eval-after-load 'embark
    (defvar embark--target-mode-timer nil)
    (defvar embark--target-mode-string "")

    (defun embark--target-mode-update ()
      (setq embark--target-mode-string
            (if-let (targets (embark--targets))
                (format "[%s%s] "
                        (propertize (symbol-name (plist-get (car targets) :type)) 'face 'bold)
                        (mapconcat (lambda (x) (format ", %s" (plist-get x :type)))
                                   (cdr targets)
                                   ""))
              "")))

    (define-minor-mode embark-target-mode
      "Shows the current targets in the modeline."
      :global t
      (setq mode-line-misc-info (assq-delete-all 'embark-target-mode mode-line-misc-info))
      (when embark--target-mode-timer
        (cancel-timer embark--target-mode-timer)
        (setq embark--target-mode-timer nil))
      (when embark-target-mode
        (push '(embark-target-mode (:eval embark--target-mode-string)) mode-line-misc-info)
        (setq embark--target-mode-timer
              (run-with-idle-timer 0.1 t #'embark--target-mode-update))))
    (embark-target-mode))
#+end_src

* Footer
#+begin_src emacs-lisp
(provide 'init-embark)
;;; init-embark.el ends here
#+end_src

* Header
#+begin_src emacs-lisp
  ;;; init-minibuffer.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src

* Consult
#+begin_src emacs-lisp
  (setup consult
    (:after vertico
      (require 'consult))
    (:option*
     consult-async-input-debounce 0.8
     consult-async-input-throttle 0.3)
    (:global
     "C-c M-x"		consult-mode-command
     "C-c c i"		consult-info
     "C-c m"		consult-man
     "C-c h"		consult-history
     "M-s e"		consult-isearch-history
     [remap switch-to-buffer] 	consult-buffer
     [remap Info-search]      	consult-info
     ;; C-x bindings (ctrl-x-map)
     "C-x M-:" 	consult-complex-command
     "C-x r b" 	consult-bookmark              ;; orig. bookmark-jump
     "C-x p b" 	consult-project-buffer
     ;; Custom M-# bindings for fast register access
     "M-#"     	consult-register-load
     "M-'"     	consult-register-store
     "C-M-#"   	consult-register
     ;; Other custom bindings
     "M-y"     	consult-yank-pop
     ;; M-g bindings (goto-map)
     "M-g e"   	consult-compile-error
     "M-g M-g" 	consult-goto-line
     "M-g o"   	consult-outline
     "M-g m"   	consult-mark
     "M-g k"   	consult-global-mark
     "M-g i"   	consult-imenu
     "M-g I"   	consult-imenu-multi
     "M-g b"   	consult-project-buffer
     ;; M-s bindings (search-map)
     ;; ("M-s D" .	consult-locate)
     "M-g f" 	consult-find
     "M-g g" 	consult-grep
     "M-g G" 	consult-git-grep
     "M-g r" 	consult-ripgrep
     "M-g l" 	consult-line
     "M-g L" 	consult-line-multi
     "M-g ." 	xref-find-references
     "M-g K" 	consult-keep-lines
     "M-g u" 	consult-focus-lines
     ;; Isearch integration
     "M-g C-s" 	consult-isearch-history)
    (:with-map
        isearch-mode-map
      (:bind
       "M-e"   	consult-isearch-history
       "M-s e" 	consult-isearch-history
       "M-s l" 	consult-line
       "M-s L"	consult-line-multi))
    (:with-map minibuffer-local-map
      (:bind
       "M-s"  	consult-history
       "M-r"  	consult-history))
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    (:hooks completion-list-mode-hook consult-preview-at-point-mode)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (:advice register-preview :override consult-register-window)
    (:when-loaded
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 2
  	  register-preview-function #'consult-register-format)

      ;; Use) Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
  	  xref-show-definitions-function #'consult-xref)
      (consult-customize
       consult-theme :preview-key '(:debounce 0.4 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-bookmark consult--source-file-register
       consult--source-recent-file consult--source-project-recent-file
       ;; :preview-key "M-."
       :preview-key '(:debounce 0.4 any))))
#+end_src
** consult projectile
#+begin_src emacs-lisp
  (setup consult-projectile
    (:after projectile
      (:after consult
        (require 'consult-projectile)))
    (:global
     "M-s p" consult-projectile))
#+end_src
** consult-eglot
#+begin_src emacs-lisp
  (setup consult-eglot
    (:after consult
      (:after eglot
        (require 'consult-eglot)))
    (:with-map eglot-mode-map
      (:bind
       "M-s d" consult-eglot-symbols)))
#+end_src
** consult-flycheck
#+begin_src emacs-lisp
  (setup consult-flycheck
    (:after consult
      (:after flycheck
        (require 'consult-flycheck)))
    (:with-map flycheck-mode-map
      (:bind
       "M-g f" consult-flycheck)))
#+end_src

* Vertico

- Vertico provides a better UX for completion reading.

#+begin_src emacs-lisp
  (setup vertico
    (:once (list :hooks 'pre-command-hook)
      (vertico-mode 1))
    (:with-map vertico-map
      (:bind
       "C-<return>" vertico-exit-input))
    (:when-loaded
      (setq completion-in-region-function
            (lambda (&rest args)
              (apply (if vertico-mode
                         #'consult-completion-in-region
                       #'completion--in-region)
                     args)))))
#+end_src
** vertico-multiform
#+begin_src emacs-lisp
  (setup vertico-multiform
    (:hooks vertico-mode-hook vertico-multiform-mode)
    (:option*
     vertico-multiform-commands '((consult-line
  				 posframe
  				 (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
  				 (vertico-posframe-border-width . 10)
  				 ;; NOTE: This is useful when emacs is used in both in X and
  				 ;; terminal, for posframe do not work well in terminal, so
  				 ;; vertico-buffer-mode will be used as fallback at the
  				 ;; moment.
  				 (vertico-posframe-fallback-mode . vertico-buffer-mode))
  				`(consult-imenu buffer indexed)
  				`(consult-outline buffer ,(lambda (_) (text-scale-set -1)))
  				(t posframe))

     ;; Configure the display per completion category.
     ;; Use the grid display for files and a buffer
     ;; for the consult-grep commands.
     vertico-multiform-categories '((file grid)
  				  (consult-grep buffer))))
#+end_src

** COMMENT vertico directory
#+begin_src emacs-lisp
  (use-package vertico-directory
    :load-path deku/vertico-load-path
    :hook
    ;; tidi shadowed file names
    (rfn-eshadow-update-overlay . vertical-directory-tidy)
    :bind (:map vertico-map
                ("DEL"   . #'vertico-directory-delete-char)
                ("M-DEL" . #'vertico-directory-delete-word)))
#+end_src
** Prescient Integration
#+begin_src emacs-lisp
  (setup vertico-prescient
    (:once (list :packages 'vertico 'prescient
  		   :hooks vertico-mode-hook)
      (vertico-prescient-mode)))
#+end_src

** Child frames and Popups
Use child frame replace ~minibuffer~.
#+begin_src emacs-lisp
  (setup vertico-posframe
    (:once (list :hooks vertico-mode-hook)
      (vertico-posframe-mode))
    (:option*
     vertico-posframe-parameters '((left-fringe . 8)
  				 (right-fringe . 8))))
#+end_src

* Prescient

#+begin_src emacs-lisp
  (setup prescient
    (:autoload prescient-persist-mode)
    (:once (list :packages 'vertico)
      (prescient-persist-mode))
    (:hooks corfu-mode-hook corfu-prescient-mode))
#+end_src

* Fix M-DEL in minibuffer

Do "delete" instead of "kill" when pressing =M-DEL=.

#+begin_src emacs-lisp
  (defun meomacs-backward-delete-sexp ()
    "Backward delete sexp.

  Used in minibuffer, replace the the default kill behavior with M-DEL."
    (interactive)
    (save-restriction
      (narrow-to-region (minibuffer-prompt-end) (point-max))
      (delete-region
       (save-mark-and-excursion
         (backward-sexp)
         (point))
       (point))))

  (define-key minibuffer-local-map (kbd "M-DEL") #'meomacs-backward-delete-sexp)
#+end_src
* Marginalia
Margin Note for Minibuffer
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (setup marginalia
    ;;
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    (:with-map minibuffer-local-map
      (:bind
       "M-A" marginalia-cycle))
    (:doc "Must be in the :init section of use-package such that the mode gets
     enabled right away. Note that this forces loading the package.")
    (:once (list :hooks after-init-hook)
      (marginalia-mode))
    :init
    (marginalia-mode))
#+end_src


* Footer
#+begin_src emacs-lisp
(provide 'init-minibuffer)
;;; init-minibuffer.el ends here
#+end_src

* Header
#+begin_src emacs-lisp
  ;;; init-snippets.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src

* Configuration

** Tempel
#+begin_src emacs-lisp
  (use-package tempel
    :diminish t
    :custom
    (tempel-trigger-prefix "<")
    ;; :hook
    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; ((prog-mode) . tempel-abbrev-mode)
    :bind (
	   ("C-M-i" . tempel-expand)
	   ("M-*"   . tempel-insert)
	   :map tempel-map
	   ("C-p"   . tempel-previous)
	   ("C-n"   . tempel-next))
    :init
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
		  (add-to-list 'completion-at-point-functions #'tempel-complete)))
    :hook ((prog-mode org-mode) . tempel-setup-capf)
    :config
    (defun tempel-reload ()
      "Force reload tempel's templates."
      (interactive)
      (setq tempel--path-templates nil)))
#+end_src

* Footer
#+begin_src emacs-lisp
(provide 'init-snippets)
;;; init-snippets.el ends here
#+end_src

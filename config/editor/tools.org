* Header
#+begin_src emacs-lisp
  ;;; init-tools.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src



* Vundo
#+begin_src emacs-lisp
  (setup vundo
    (:global
     "C-?" vundo)) ;; Emacs's undo binding on C-/, bind C-S-/ for vundo for more complex situations.
#+end_src

* Avy
#+begin_src emacs-lisp
  (setup avy
    (:when-loaded
      (custom-set-faces
       '(avy-lead-face   ((t (:foreground "#00dfff" :background "unspecified" :wegith 'bold))))
       '(avy-lead-face-0 ((t (:foreground "#2b8db3" :background "unspecified"))))
       '(avy-lead-face-1 ((t (:foreground "#2b8db3" :background "unspecified"))))
       '(avy-lead-face-2 ((t (:foreground "#2b8db3" :background "unsepecified"))))))
    (:doc "Colemak layout keys.")
    (:option*
     avy-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?i ?o))
    (:global
     "C-\"" avy-goto-char-2
     "C-'"  avy-goto-char))
#+end_src

* Mark
** Expand Region
#+begin_src emacs-lisp
  (setup expand-region
    (:global
     "C-," 'er/expand-region
     "C-<" 'er/contract-region))
#+end_src
* Pairs
** Paredit
#+begin_src emacs-lisp
  (setup paredit
    (:global
     "C-c )" paredit-forward-slup-sexp
     "C-c (" paredit-forward-barf-sexp)
    (:hooks (list emacs-lisp-mode-hook
  		clojure-mode-hook)
  	  enable-paredit-mode)
    (:with-map paredit-mode-map
      (:bind
       "M-o" paredit-splice-sexp)
      (:unbind "C-<left>" "C-<right>" "M-s" "M-?" [?\r])))
#+end_src

** COMMENT Comboblulate
Structure editing and movement for programming language.
#+begin_src emacs-lisp
  (use-package combobulate
    :hook ((python-ts-mode . combobulate-mode)
           (js-ts-mode . combobulate-mode)
           (css-ts-mode . combobulate-mode)
           (yaml-ts-mode . combobulate-mode)
           (typescript-ts-mode . combobulate-mode)
           (tsx-ts-mode . combobulate-mode)))
#+end_src
* Separetly edit
** TODO sepatedit.el
[[w3m:https://github.com/twlz0ne/separedit.el][separedit.el]]


* Transient
#+begin_src emacs-lisp
  (setup transient
    (:option*
     transient-history-limit 30
     transient-highlight-mismatched-keys  t
     transient-align-variable-pitch       t
     transient-force-fixed-pitch          t
     transient-detect-key-conflicts       t)
    (:with-map transient-map
      (:bind
       "M-v" transient-scroll-down)))
#+end_src

** Transient Showcase
#+begin_src emacs-lisp
  (setup transient-showcase
    (:once (list :files 'transient)
      (require 'transient-showcase)))
#+end_src
* Search and Replace

** Rg
- [ ] key bindings
#+begin_src emacs-lisp
  (setup rg)
#+end_src
** Wgrep

#+begin_src emacs-lisp
  (setup wgrep
    (:with-map grep-mode-map
      (:bind
       "C-c C-p" wgrep-change-to-wgrep-mode)))
#+end_src

** Iedit
#+begin_src emacs-lisp
  (setup iedit
    (:global
     "C-;" iedit-mode
     "C-M-;" iedit-rectangle-mode))
#+end_src


* Input Method
** TODO Emacs Rime
- [ ] change ~rime-librime-root~ and ~rime-user-data-dir~ to custom variable
#+begin_src emacs-lisp
  (setup rime
    (:global
     "C-M-<return>" toggle-input-method) ;; orig. C-\
    (:with-map rime-mode-map
      (:bind
       "C-`" rime-send-keybinding))

    (:with-map rime-active-mode-map
      (:bind
       "C-t" rime-inline-ascii))
    (:option*

     rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g" "C-v" "C-a" "C-e"
  				"C-d" "M-v" "<left>" "<right>" "<up>"
  				"<down>" "<prior>" "<next>" "<delete>")
     rime-inline-ascii-trigger 'shift-r
     rime-user-data-dir "~/.config/rime"
     rime-cursor         "Ë°"
     rime-show-candidate 'posframe
     rime-posframe-style 'vertical
     rime-show-preedit   t
     rime-librime-root (expand-file-name "librime" user-emacs-directory)
     default-input-method "rime"))
#+end_src

*** Sync Squirrel Configuration
#+begin_src shell :tangle no
cp -rf ~/Library/Rime/* ~/.config/rime
#+end_src

** Smart Input Source

#+begin_src emacs-lisp
  (setup sis
    (:option*
     sis-prefix-override-buffer-disable-predicates
     (list 'minibufferp
           (;; magit
  	  lambda ()
  	  (sis--string-match-p "^magit.*:" (buffer-name)))
           (;; special buffer
  	  lambda ()
  	  (let ((normalized-buffer-name
                   (downcase (string-trim (buffer-name)))))
              (and (sis--string-match-p "^\*" normalized-buffer-name)
                   (not (sis--string-match-p "^\*new\*" normalized-buffer-name))
                   (not (sis--string-match-p "^\*dashboard\*"
                                             normalized-buffer-name))
                   (not (sis--string-match-p "^\*scratch\*"
                                             normalized-buffer-name))))))
     sis-default-cursor-color "#51afef"
     sis-other-cursor-color   "#FF8000")
    (:when-loaded

      (sis-ism-lazyman-config "com.apple.keylayout.ABC"
                              "im.rime.inputmethod.Squirrel.Hans"
                              'native)
      ;; automatically change cursor color according to current input source.
      ;; bug: laggy
      (sis-global-cursor-color-mode  t))
    (:after meow
      (add-hook 'meow-insert-exit-hook #'sis-set-english)
      (add-hook 'focus-in-hook #'sis-set-english)))
#+end_src


* Debug
** Realgud
- =trepan3k= for ~python3~, can run ~trepan3k~ or ~realgud:trepan3k~
- =gdb= for multiple support languages, run ~realgud:gdb~, ~gdb~ is Emacs built-in command.

*** Install
Use ~C-c~ as prefix and then press ~n/s/r/u/q~ to ~next/step/restart/older-frame/quit~

#+begin_src emacs-lisp
  (setup realgud
    (:hooks
     realgud-short-key-mode-hook
     (lambda ()
       (local-set-key "\C-c" realgud:shortkey-mode-map))))
#+end_src

* Footer
#+begin_src emacs-lisp
(provide 'init-tools)
;;; init-tools.el ends here
#+end_src

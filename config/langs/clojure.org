* Header
#+begin_src emacs-lisp
;;; init-clojure.el -- Deku Init File. -*- lexical-binding: t -*-
;;; Commentary:

#+end_src

* Clojure Lsp
#+begin_src emacs-lisp
  (setup clojure-mode
    (:hooks clojure-mode-hook eglot-ensure)
    (:option*
      clojure-toplevel-inside-comment-form t)
    (:when-loaded
      (define-clojure-indent
       (re-frame/reg-event-fx :defn)
       (re-frame/reg-event-db :defn)
       (re-frame/reg-sub :defn)
       (re-frame/reg-fx :defn)
       (t/async :defn)
       (thrown-with-msg? :defn))))
#+end_src
* CIDER
#+begin_src emacs-lisp
  (setup cider
    (:option*
     cider-offer-to-open-cljs-app-in-browser nil
     cider-show-error-buffer -1)
    (:hooks cider-repl-mode-hook enable-paredit-mode
  	  cider-repl-mode-hook corfu-mode)
    (:with-map cider-mode-map
      (:bind "C-c C-f" cider-format-buffer))
    (:with-map cider-repl-mode-map
      (:bind "S-<return>" newline)))
#+end_src
** Dependencies
All By CIDER
*** queue
#+begin_src emacs-lisp
  (setup queue)
#+end_src
*** parseclj
#+begin_src emacs-lisp
  (setup parseclj)
#+end_src
*** parseedn
#+begin_src emacs-lisp
  (setup parseedn)
#+end_src

*** sesman
#+begin_src emacs-lisp
  (setup sesman)
#+end_src
* Footer
#+begin_src emacs-lisp
(provide 'init-clojure)
;;; init-clojure.el ends here
#+end_src

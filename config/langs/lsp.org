* Header
#+begin_src emacs-lisp
  ;;; init-lsp.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src

* LSP
Language Server Protocol

* COMMENT Lspce
#+begin_src emacs-lisp
  (setup lspce
    (:hooks
     after-save-hook
     (lambda ()
       (when (fboundp 'lspce--documentationFormat)
         (lspce--documentationFormat))))
    (:option*
     lspce-send-changes-idle-time 1
     lspce-server-programs `(("rust" "rust-analyzer" "")
  			   ("python" "pyright-langserver" "--stdio")
  			   ("bash" "bash-language-server" "start")
  			   ("clojure" "clojure-lsp" ""))))
#+end_src

* Eglot
Built-in since emacs29
- [ ] disable for =ein=
#+begin_src emacs-lisp
  (setup eglot
    (:hooks
     after-save-hook
     (lambda ()
       (when (and (fboundp 'eglot-managed-p) (eglot-managed-p))
         (eglot-format)
         (save-buffer))))
    (:option*
     eglot-ignored-server-capabilites '(:documentHighlightProvider)
     read-process-output-max (* 1024 1024))
    (:global

     "C-M-r"	eglot-rename
     "<C-return>" eglot-code-actions
     "C-M-f"	eglot-code-action-quickfix
     "C-c C-l"	eglot-code-action-line
     "C-c C-e"	eglot-code-action-extract
     "C-c C-f"	eglot-format
     "C-c C-o"	eglot-code-action-organize-imports
     "C-c C-h"  eldoc)
    (:when-loaded
      (add-to-list 'eglot-stay-out-of 'flymake)))

#+end_src


* Flycheck

#+begin_src emacs-lisp
  (setup flycheck

    (:option*
     flycheck-idle-change-delay 1.0
     flycheck-buffer-switch-check-intermediate-buffers t
     flycheck-display-errors-delay 0.25
     flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list
     flycheck-check-syntax-automatically '(save idle-change mode-enable))
    (:hooks (list prog-mode-hook org-mode-hook) flycheck-mode))

  (setup flycheck-popup-tip
    (:hooks flycheck-mode-hook flycheck-popup-tip-mode))
#+end_src

** Eglot Integrations
#+begin_src emacs-lisp
  (setup flycheck-eglot
    (:once (list :files 'eglot)
      (require 'flycheck-eglot))
    (:when-loaded
      (global-flycheck-eglot-mode)))
#+end_src


* Tree Sitter
** Setup
#+begin_src emacs-lisp
  (setup treesit
    (:hooks prog-mode-hook (lambda () (require 'treesit)))
    (:when-loaded
      (defun mp-setup-install-grammars ()
        "Install Tree-sitter grammars if they are absent."
        (interactive)
        (dolist (grammar
                 '((css "https://github.com/tree-sitter/tree-sitter-css")
                   (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
                   (python "https://github.com/tree-sitter/tree-sitter-python")
                   (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
                   (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
          (add-to-list 'treesit-language-source-alist grammar)
          ;; Only install `grammar' if we don't already have it
          ;; installed. However, if you want to *update* a grammar then
          ;; this obviously prevents that from happening.
          (unless (treesit-language-available-p (car grammar))
            (treesit-install-language-grammar (car grammar)))))

      (mp-setup-install-grammars)))
#+end_src
** Tree Sitter Auto
Enable tree-sitter for supported languages
#+begin_src emacs-lisp
  (setup treesit-auto
    (:once (list :packages 'treesit)
      (require 'treesit-auto)
      (add-hook 'prog-mode-hook #'treesit-auto-mode))
    (:when-loaded
      (setq treesit-auto-install 'prompt)
      (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
      (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
      (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
      (add-to-list 'major-mode-remap-alist '(rust-mode . rust-ts-mode))
      (add-to-list 'major-mode-remap-alist
                   '(c-or-c++-mode . c-or-c++-ts-mode))
      (add-to-list 'auto-mode-alist
                   '("\\.ya?ml\\'" . yaml-ts-mode))))
#+end_src
* Footer
#+begin_src emacs-lisp
(provide 'init-lsp)
;;; init-lsp.el ends here
#+end_src

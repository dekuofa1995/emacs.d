* Header
#+begin_src emacs-lisp
  ;;; init-lsp.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src

* LSP
Language Server Protocol

** TODO Eglot
Built-in since emacs29
- [ ] disable for =ein=
#+begin_src emacs-lisp
  (use-package eglot
    :custom
    (eglot-ignored-server-capabilites '(:documentHighlightProvider))
    (read-process-output-max (* 1024 1024))
    :bind
    ("C-M-r"	. eglot-rename)
    ("<C-return>" . eglot-code-actions)
    ("C-M-f"	. eglot-code-action-quickfix)
    ("C-c C-l"	. eglot-code-action-line)
    ("C-c C-e"	. eglot-code-action-extract)
    ("C-c C-f"	. eglot-format)
    ("C-c C-o"	. eglot-code-action-organize-imports)
    ("C-c C-h"    . eldoc)
    :config
    (add-to-list 'eglot-stay-out-of 'flymake))

#+end_src


* Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :custom
    (flycheck-idle-change-delay 1.0)
    (flycheck-buffer-switch-check-intermediate-buffers t)
    (flycheck-display-errors-delay 0.25)
    (flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list)
    (flycheck-check-syntax-automatically '(save idle-change mode-enable))
    :hook ((prog-mode org-mode) . flycheck-mode))

  (use-package flycheck-popup-tip
    :hook (flycheck-mode . flycheck-popup-tip-mode))
#+end_src

** Eglot Integrations
#+begin_src emacs-lisp
  (use-package flycheck-eglot
    ;; :demand t
    :preface
    (advice-add #'eglot-ensure :after #'flycheck-eglot-mode))
#+end_src


* Tree Sitter
** Setup
#+begin_src emacs-lisp
  (use-package treesit
      :preface
      (defun mp-setup-install-grammars ()
        "Install Tree-sitter grammars if they are absent."
        (interactive)
        (dolist (grammar
                 '((css "https://github.com/tree-sitter/tree-sitter-css")
                   (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
                   (python "https://github.com/tree-sitter/tree-sitter-python")
                   (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
                   (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
          (add-to-list 'treesit-language-source-alist grammar)
          ;; Only install `grammar' if we don't already have it
          ;; installed. However, if you want to *update* a grammar then
          ;; this obviously prevents that from happening.
          (unless (treesit-language-available-p (car grammar))
            (treesit-install-language-grammar (car grammar)))))
      :init
      (add-hook 'prog-mode-hook (lambda () (require 'treesit)))
      :config
      (mp-setup-install-grammars))
#+end_src
** Tree Sitter Auto
Enable tree-sitter for supported languages
#+begin_src emacs-lisp
  (use-package treesit-auto
      :hook (prog-mode . treesit-auto-mode)
      :config
      (setq treesit-auto-install 'prompt)
      (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
      (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
      (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
      (add-to-list 'major-mode-remap-alist '(rust-mode . rust-ts-mode))
      (add-to-list 'major-mode-remap-alist
                   '(c-or-c++-mode . c-or-c++-ts-mode))
      (add-to-list 'auto-mode-alist
                   '("\\.ya?ml\\'" . yaml-ts-mode)))

#+end_src
* Footer
#+begin_src emacs-lisp
(provide 'init-lsp)
;;; init-lsp.el ends here
#+end_src

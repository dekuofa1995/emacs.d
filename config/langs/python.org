* Header
#+begin_src emacs-lisp
  ;;; init-python.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src

* Python
** Enable Eglot
#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
		 `((python-mode python-ts-mode) . ("pyright-langserver" "--stdio")))
    (add-hook 'python-ts-mode-hook
	      (lambda ()
		(unless (bound-and-true-p elpy-mode)
		  (eglot-ensure)))))
#+end_src
** Elpy
For =EIN= use elpy company backend.
#+begin_src emacs-lisp
  (setup elpy
    (:autoload elpy-enable)
    (:option*
     elpy-modules '(elpy-module-sane-defaults elpy-module-company elpy-module-eldoc))
    (:when-loaded
      (nasy/update-company-backend '(python-mode python-ts-mode)
        '(elpy-company-backend
  	company-files))
      (defun elpy-setup ()
        "Setup ELPY."
        (interactive)
        (elpy-enable)
        (elpy-mode)))
    (:hooks
     ein:notebook-mode-hooks elpy-setup))
#+end_src
** Ob Python
#+begin_src emacs-lisp
  (setup ob-python
    (:once (list :files 'org)
      (require 'ob-python))
    (:option*
      org-babel-default-header-args:python '((:async   . "yes")
                                             (:session . "py")
                                             (:results . "output")
                                             (:kernal  . "python")))
    (:autoload org-babel-execute:python
               org-babel-expand-body:python))
#+end_src

** Conda
#+begin_src emacs-lisp
  (setup conda
    (:hooks
     ein:ipynb-mode-hook conda-env-autoactivate-mode)
    (:autoload conda-env-list conda-env-activate conda-env-deactivate)
    (:option*
     conda-anaconda-home "/usr/local/Caskroom/miniconda/base/"))
#+end_src
** TODO Debug Configuration

* Jupyter
** jupyter
#+begin_src emacs-lisp
  (setup jupyter
    (:autoload
     org-babel-execute:jupyter
     org-babel-expand-body:jupyter))
#+end_src

** EIN
For python notebook.
#+begin_src emacs-lisp
  (setup ein
    (:when-loaded
      (add-hook 'ein:notebook-mode-hook
  	      (lambda ()
  		(define-key ein:notebook-mode-map (kbd "C-M-n") #'ein:worksheet-goto-next-input-km)
  		(define-key ein:notebook-mode-map (kbd "C-M-p") #'ein:worksheet-goto-prev-input-km))))
    (:autoload ein:run))
#+end_src

* Footer
#+begin_src emacs-lisp
(provide 'init-python)
;;; init-python.el ends here
#+end_src

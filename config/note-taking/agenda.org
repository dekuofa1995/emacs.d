* Header
#+begin_src emacs-lisp
  ;;; init-agenda.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src

* GTD

 Get Things Done.

** Org Agenda

#+begin_src emacs-lisp
  (setq org-agenda-files (list "inbox.org" "agenda.org" "projects.org"))
  (define-key global-map (kbd "C-c a") #'org-agenda)
  ;; remove the redundant tags
  (setq org-agenda-hide-tags-regexp ".")
  ;; include entries from Emacs diary into agenda
  ;; org-agenda-include-diary    t
  (setq org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t% s")
          (todo   . " ")
          (tags   . " %i %-12:c")
          (search . " %i %-12:c")))
  ;; (define-key org-mode-map (kbd "C-'") nil) ;; orig. org-cycle-agenda-files
  ;; conflect with avy-goto-char-2
#+end_src

*** Refile
#+begin_src emacs-lisp
  (setq org-refile-targets
        '(("projects.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")))

  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
#+end_src

*** Task

**** Log time for task

#+begin_src emacs-lisp
  (defun log-todo-next-creation-date (&rest ignore)
    "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
    (when (and (string= (org-get-todo-state) "NEXT")
               (not (org-entry-get nil "ACTIVATED")))
      (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))

  (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)
  (setq org-log-done 'time)
#+end_src

****  Keywords

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "FIXED(f)" "HOLD(h)" "HACK(H)" "|" "DONE(d)")))

#+end_src

* Footer
#+begin_src emacs-lisp
(provide 'init-agenda)
;;; init-agenda.el ends here
#+end_src

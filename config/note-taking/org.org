#+title: Org Mode
* Header
#+begin_src emacs-lisp
  ;;; init-org.el -- Init File. -*- lexical-binding: t -*-
  ;;; Commentary:

#+end_src

* Org
** Setup Org Mode
#+begin_src emacs-lisp
  (use-package org
    :load-path  "~/.emacs.d/lib/org"
    :custom
    (org-directory "~/Notes/org")
    (org-toggle-pretty-entities t)
    (org-auto-align-tags nil)
    (org-tags-columns 0)
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-hide-emphasis t)
    (org-pretty-entities t)
    :bind
    (("C-c n c"     . org-capture)
     :map org-mode-map
     ("C-c C-o"     . org-open-at-point)
     ("M-<right>"   . org-do-demote)
     ("M-<left>"    . org-do-promote)
     ("M-S-<right>" . org-demote-subtree)
     ("M-S-<left>"  . org-promote-subtree)
     ("M-<up>"      . org-move-subtree-up)
     ("M-<down>"    . org-move-subtree-down)
     ("C-c @"       . org-mark-subtree)
     ;; refile: move content to better localtion/file
     ("C-c C-w"     . org-refile)
     ("C-y"         . org-yank)
     ("C-c *"       . org-toggle-heading)
     ("C-c ^"       . org-sort)
     ;; narrow and widen
     ("C-x n s"     . org-narrow-to-subtree)
     ("C-x n b"     . org-narrow-to-block)
     ("C-x n w"     . widen)
     ("C-x C-v"     . visible-mode) ;; toggle markup visibility
     )
    :init
    (setq
     org-ellipsis                        " ï„‡ " ;; folding symbol
     ;; org-startup-indented                t ;; disable for org-modern-mode's block fringe
     org-hide-emphasis-markers           t
     org-fontify-done-headline           t
     org-fontify-whole-heading-line      t
     org-fontify-quote-and-verse-blocks  t
     org-src-tab-acts-natively           t)
    :config
    (org-indent-mode -1) ;; for org-modern-mode's block fringe
    (define-key org-mode-map (kbd "C-'")  nil) ;; org-cycle-agenda-files use C-,
    )
#+end_src

** Captures
#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("i" "Inbox" entry (file "inbox.org")
           ,(concat "* TODO %?\n"
                    "/Entered on/ %U"))
          ("m" "Meeting" entry (file+headline "agenda.org" "Future")
           ,(concat "* %? :meeting:\n"
                    "<%<%Y-%m-%d %a %H:00>>"))
          ("n" "Note" entry (file "notes.org")
           ,(concat "* Note (%a)\n"
                    "/Entered on/ %U\n" "\n" "%?"))
          ))

  (defun org-capture-inbox ()
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "i"))

  (define-key global-map (kbd "C-c i") 'org-capture-inbox)

#+end_src
** COMMENT Enable org indent mode

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

* Babel
** Functions
#+begin_src emacs-lisp
  (defun meomacs-after-babel-execute ()
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))

  (add-hook 'org-babel-after-execute-hook 'meomacs-after-babel-execute)
#+end_src
** Languages
*** C
#+begin_src emacs-lisp
  (use-package ob-C
    :load-path deku/org-source-dir
    :commands (
               org-babel-execute:C
               org-babel-expand-body:C
               org-babel-execute:cpp
               org-babel-expand-body:cpp
               org-babel-execute:C++
               org-babel-expand-body:C++))
#+end_src
*** emacs-lisp
#+begin_src emacs-lisp
  (use-package ob-emacs-lisp
    :load-path deku/org-source-dir
    :commands (org-babel-execute:emacs-lisp
               org-babel-expand-body:emacs-lisp))
#+end_src
*** jupyter
#+begin_src emacs-lisp
  (use-package jupyter
    :commands
    (org-babel-execute:jupyter
     org-babel-expand-body:jupyter))
#+end_src

*** ob-plantuml
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :config
    (with-eval-after-load 'org
      (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))))

  (use-package ob-plantuml
    :load-path deku/org-source-dir
    :preface
    (let* ((brew_prefix (if sys/x86p
                            "/usr/local"
                          "/opt/homebrew"))
           (jar-name "plantuml.jar")
           (jar-path (format "%s/opt/plantuml/libexec/%s" brew_prefix jar-name)))
      (setq org-plantuml-jar-path jar-path)
      (unless (file-exists-p jar-path)
        (message "Load plantuml from BREW failed, Please check it in BREW")))
    :commands (org-babel-execute:plantuml
               org-babel-expand-body:plantuml)
    )
#+end_src


** Ob Async
#+begin_src emacs-lisp
  (use-package ob-async
    :init
    (add-hook 'org-mode-hook (lambda () (require 'ob-async))))
#+end_src

* Footer
#+begin_src emacs-lisp
(provide 'init-org)
;;; init-org.el ends here
#+end_src

* Header
#+begin_src emacs-lisp
;;; init-doom-modeline.el -- Init File. -*- lexical-binding: t -*-
;;; Commentary:

#+end_src

* Configuration
** Doom Modeline Settings
#+begin_src emacs-lisp
  (use-package doom-modeline
    :custom
    (doom-modeline-project-detection 'ffip)
    :init
    (setq
     doom-modeline-icon                      t
     doom-modeline-major-mode-color-icon     t
     doom-modeline-buffer-state-icon         t
     doom-modeline-buffer-modification-icon  t
     doom-modeline-unicode-fallback          t
     doom-modeline-support-imenu             t
     doom-modeline-modal                     t
     doom-modeline-lsp                       t
     doom-modeline-indent-info               t
     doom-modeline-env-version               t
     doom-modeline-env-python                t
     doom-modeline-env-rust                  t
     doom-modeline-github                    t
     doom-modeline-enable-word-count         t
     doom-modeline-height                    1
     doom-modeline-buffer-encoding           nil
     doom-modeline-indent-info               nil
     doom-modeline-buffer-file-name-style 'relative-to-project
     doom-modeline-env-python-executable "python"
     doom-modeline-env-rust-executable   "rustc"
     doom-modeline-env-load-string       "...")
    :hook
    (after-init . doom-modeline-mode)
    :config
    (doom-modeline-def-segment git-status
      "Display git status such as the number of modified files and the number of untracked files."
      (when-let ((git-status git-ml))
        (concat
         (doom-modeline-spc)
         ;; TODO colorful `git-status'
         (doom-modeline-display-text (format "[%s]" (string-trim git-status)))
         (doom-modeline-spc))))
    (doom-modeline-mode 1))
#+end_src

** Custom Modeline
#+begin_src emacs-lisp
  (with-eval-after-load 'doom-modeline
    (doom-modeline-def-modeline 'deku-mode-line
        '(window-number workspace-name modals matches buffer-info remote-host buffer-position parrot selection-info)
        '(misc-info minor-modes objed-state gnus debug lsp minor-modes
                    input-method buffer-encoding major-mode process vcs git-status checker))
    (defun deku/setup-doom-modeline ()
      "Set `deku-mode-line' to default modeline."
      (doom-modeline-set-modeline 'deku-mode-line 'default))

    (add-hook 'doom-modeline-mode-hook 'deku/setup-doom-modeline))

#+end_src

** Modeline Faces
#+begin_src emacs-lisp
  (custom-set-faces
   '(mode-line ((t (:height 0.9))))
   '(mode-line-active ((t (:height 0.9))))
   '(mode-line-inactive ((t (:height 0.9)))))
#+end_src

** TODO Git Status
=UNTESTED CODE=
#+begin_src emacs-lisp
  (autoload 'git-ml-activate "git-ml" "Activate git status in modeline." t)
  (autoload 'git-ml-refresh "git-ml" "Refresh git status." t)
  (with-eval-after-load 'doom-modeline
    (add-hook 'find-file-hook #'git-ml-activate)
    (advice-add #'vc-refresh-state :after #'git-ml-refresh))
#+end_src

** Meow Indicator Faces
- TODO create personal color scheme
#+begin_src emacs-lisp
  (custom-set-faces
     '(meow-insert-indicator ((t (:background "#acf2bd" :foreground "black"))))
     '(meow-beacon-indicator ((t (:background "#FF8800" :foreground "white"))))
     '(meow-keypad-indicator ((t (:background "#ffc86f" :foreground "white"))))
     '(meow-motion-indicator ((t (:background "#51afef" :foreground "white"))))
     '(meow-normal-indicator ((t (:background "#51afef" :foreground "white"))))
     '(meow-search-indicator ((t (:background "#c678dd" :foreground "white")))))
#+end_src
* Footer
#+begin_src emacs-lisp
(provide 'init-doom-modeline)
;;; init-doom-modeline.el ends here
#+end_src

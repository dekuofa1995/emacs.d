#+title: Look & Feel

Configuration for look and feels, make UI looks better.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
  ;; (require 'subr-x)
  (require 'cl-lib)
  ;; (require 'color)
  (require 'init-const)
#+end_src

* Disable emacs components

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

* Enable window divider
#+begin_src emacs-lisp
  (window-divider-mode 1)
#+end_src

* UI related variables

#+begin_src emacs-lisp
  (setq x-underline-at-descent-line t)
#+end_src

* Fonts

** Fonts Families

Default variables

#+begin_src emacs-lisp
  (defvar meomacs-font-size 20
    "Current font size")
  (defvar meomacs-theme '((default . "Source Code Pro")
		     (cjk . "Unifont")
		     (symbol . "Unifont")
		     (fixed . "Source Code Pro")
		     (fixed-serif . "Cousine Nerd Font")
		     (variable . "Source Code Pro Itaic")
		     (wide . "Source Code Pro Medium")
		     (tall . "Source Code Pro Light"))
    "Fonts to use.")
#+end_src

  Define functions for loading fonts
  Font families are specified in [[file:private.org::Fonts][private]] config.

 #+begin_src emacs-lisp
   ;; Font
   (defun font-installed-p (font-name)
     "Check if font with FONT-NAME is available."
     (find-font (font-spec :name font-name)))
   (defun centaur-setup-fonts (&rest _args)
     "Setup fonts."
     (interactive)
     (message "centaur-setup-fonts")
     (when (display-graphic-p)
       ;; Set default font
       (cl-loop for font in `(,my/english-font "Menlo" "Cascadia Code" "Menlo" "SF Mono" "Fira Code"
                              "Jetbrains Mono" "Hack"
                              "Monaco" "DejaVu Sans Mono" "Consolas")
                when (font-installed-p font)
                return (set-face-attribute 'default nil
                                           :family font
                                           :height 200))
       ;; Specify font for Chinese characters
       (cl-loop for font in '("LXGW WenKai" "WenQuanYi Micro Hei" "PingFang SC" "Microsoft Yahei" "STFangsong")
                when (font-installed-p font)
                return (progn
                         (set-fontset-font t '(#x4e00 . #x9fff) (font-spec :family font))))
       (set-face-attribute 'default nil :family my/english-font :height 200)
       (set-face-attribute 'font-lock-function-name-face nil :weight 'bold)
       (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

       ;; Set mode-line font
       (cl-loop for font in '("Menlo" "SF Pro Display" "Helvetica")
                when (font-installed-p font)
                return (progn
                         (set-face-attribute 'mode-line nil :family font)
                         (when (facep 'mode-line-active)
                           (set-face-attribute 'mode-line-active nil :family font :height 140 :weight 'medium))
                         (set-face-attribute 'mode-line-inactive nil :family font :height 140)))

       ;; Specify font for all unicode characters
       ;; (cl-loop for font in '("Segoe UI Symbol" "Symbola" "Symbol")
       ;;          when (font-installed-p font)
       ;;          return (set-fontset-font t 'unicode font nil 'prepend))

       ;; Emoji
       (cl-loop for font in '("Noto Color Emoji" "Apple Color Emoji")
                when (font-installed-p font)
                return (if (>= emacs-major-version 28)
                           (set-fontset-font t 'emoji (font-spec :family font) nil 'prepend)
                         (set-fontset-font t 'symbol (font-spec :family font) nil 'prepend)))

       ))

   (advice-add 'load-theme :after #'centaur-setup-fonts)
   ;; (add-hook 'after-init-hook #'setup-chinese-font-face)
   ;; (add-hook 'dashboard-mode-hook #'centaur-setup-fonts)
   ;; (add-hook 'server-after-make-frame-hook #'centaur-setup-fonts)
   ;; (add-hook 'after-init-hook #'centaur-setup-fonts)
#+end_src

*** COMMENT Fira Code
#+begin_src emacs-lisp
  (when (window-system)
    (set-frame-font "Fira Code"))

  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
		 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
		 (36 . ".\\(?:>\\)")
		 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
		 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
		 (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
		 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
		 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
		 (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
		 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
		 (48 . ".\\(?:x[a-zA-Z]\\)")
		 (58 . ".\\(?:::\\|[:=]\\)")
		 (59 . ".\\(?:;;\\|;\\)")
		 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
		 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
		 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
		 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
		 (91 . ".\\(?:]\\)")
		 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
		 (94 . ".\\(?:=\\)")
		 (119 . ".\\(?:ww\\)")
		 (123 . ".\\(?:-\\)")
		 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
		 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
		 )
	       ))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
			    `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+end_src


*** Variables used when spliting window
#+begin_src emacs-lisp
  (defvar meomacs-font-current-variant nil)

  (defun meomacs-dynamic-set-font (&rest ignore)
    (interactive)
    (when (or (frame-root-window-p (get-buffer-window))
              (frame-root-window-p (window-parent)))
      (let* ((prev-font-style meomacs-font-current-variant)
             (wl (seq-filter (lambda (w) (not (string-prefix-p " " (buffer-name (window-buffer w))))) (window-list)))
             (def (meomacs--get-font-family 'default))
             (new-variant (cond
                              ((= 1 (length wl))
                               (meomacs--get-font-family 'default))

                              ((window-combined-p)
                               (meomacs--get-font-family 'tall))

                              (t
                               (meomacs--get-font-family 'wide)))))
        (unless (equal prev-font-style new-variant)
          (setq meomacs-font-current-variant new-variant)
          (set-frame-font new-variant)
          (meomacs-load-charset-font new-variant)))))

  (setq frame-inhibit-implied-resize t)
#+end_src

* TODO Themes

Create a command ~meomacs-next-theme~ to switch themes.

#+begin_src emacs-lisp

  (defvar meomacs-themes '(kaolin-light)
    "Themes to use.")

  (defun meomacs-load-theme ()
    (when-let ((theme (car meomacs-themes)))
      (message "Load theme: %s" (car meomacs-themes))
      (mapc 'disable-theme custom-enabled-themes)
      (unless (eq theme 'default)
        (load-theme theme t))))

  (defun meomacs-next-theme ()
    (interactive)
    (when meomacs-themes
      (setq meomacs-themes (append (cdr meomacs-themes) (list (car meomacs-themes))))
      (meomacs-load-theme)))

  ;; (add-hook 'desktop-after-read-hook 'meomacs-load-theme)
  ;; (add-hook 'desktop-after-read-hook 'centaur-setup-fonts)
#+end_src

** COMMENT doom-themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :custom
    ;; (doom-themes-treemacs-theme "doom-colors") ;; enable color icons in treemacs
    :config
    ;; (doom-themes-treemacs-config)
    ;; (doom-themes-org-config)
    )
#+end_src

** kaolin-themes
#+begin_src emacs-lisp
  (use-package kaolin-themes)
#+end_src
** COMMENT lambda-themes
#+begin_src emacs-lisp
  (use-package lambda-themes
    :custom
    (lambda-themes-set-italic-comments t)
    (lambda-themes-set-italic-keywords t)
    (lambda-themes-set-variable-pitch t))
#+end_src
** ef-themes
#+begin_src emacs-lisp
  (use-package ef-themes)
#+end_src

** Icons
*** Nerd Icons
#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src

**** Nerd Icon for Dired
#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))
#+end_src
**** Nerd Icon for iBuffer
#+begin_src emacs-lisp
  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src
*** Kind Icon
#+begin_src emacs-lisp
  (use-package kind-icon
    :custom
    (kind-icon-use-icons t)
    (kind-icon-blend-background nil)
    ;; fix kind icon to large bug
    (kind-icon-default-style '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.7 :scale 1.2))
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :init
    (defun setup-vscode-kind-icons ()
      (setq kind-icon-mapping
	    '((array          "a"   :icon "symbol-array"       :face font-lock-type-face              :collection "vscode")
	      (boolean        "b"   :icon "symbol-boolean"     :face font-lock-builtin-face           :collection "vscode")
	      (color          "#"   :icon "symbol-color"       :face success                          :collection "vscode")
	      (command        "cm"  :icon "chevron-right"      :face default                          :collection "vscode")
	      (constant       "co"  :icon "symbol-constant"    :face font-lock-constant-face          :collection "vscode")
	      (class          "c"   :icon "symbol-class"       :face font-lock-type-face              :collection "vscode")
	      (constructor    "cn"  :icon "symbol-method"      :face font-lock-function-name-face     :collection "vscode")
	      (enum           "e"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "vscode")
	      (enummember     "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "vscode")
	      (enum-member    "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "vscode")
	      (event          "ev"  :icon "symbol-event"       :face font-lock-warning-face           :collection "vscode")
	      (field          "fd"  :icon "symbol-field"       :face font-lock-variable-name-face     :collection "vscode")
	      (file           "f"   :icon "symbol-file"        :face font-lock-string-face            :collection "vscode")
	      (folder         "d"   :icon "folder"             :face font-lock-doc-face               :collection "vscode")
	      (function       "f"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "vscode")
	      (interface      "if"  :icon "symbol-interface"   :face font-lock-type-face              :collection "vscode")
	      (keyword        "kw"  :icon "symbol-keyword"     :face font-lock-keyword-face           :collection "vscode")
	      (macro          "mc"  :icon "lambda"             :face font-lock-keyword-face)
	      (magic          "ma"  :icon "lightbulb-autofix"  :face font-lock-builtin-face           :collection "vscode")
	      (method         "m"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "vscode")
	      (module         "{"   :icon "file-code-outline"  :face font-lock-preprocessor-face)
	      (numeric        "nu"  :icon "symbol-numeric"     :face font-lock-builtin-face           :collection "vscode")
	      (operator       "op"  :icon "symbol-operator"    :face font-lock-comment-delimiter-face :collection "vscode")
	      (param          "pa"  :icon "gear"               :face default                          :collection "vscode")
	      (property       "pr"  :icon "symbol-property"    :face font-lock-variable-name-face     :collection "vscode")
	      (reference      "rf"  :icon "library"            :face font-lock-variable-name-face     :collection "vscode")
	      (snippet        "S"   :icon "symbol-snippet"     :face font-lock-string-face            :collection "vscode")
	      (string         "s"   :icon "symbol-string"      :face font-lock-string-face            :collection "vscode")
	      (struct         "%"   :icon "symbol-structure"   :face font-lock-variable-name-face     :collection "vscode")
	      (text           "tx"  :icon "symbol-key"         :face font-lock-doc-face               :collection "vscode")
	      (typeparameter  "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "vscode")
	      (type-parameter "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "vscode")
	      (unit           "u"   :icon "symbol-ruler"       :face font-lock-constant-face          :collection "vscode")
	      (value          "v"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "vscode")
	      (variable       "va"  :icon "symbol-variable"    :face font-lock-variable-name-face     :collection "vscode")
	      (t              "."   :icon "question"           :face font-lock-warning-face           :collection "vscode"))))
    :config
    (setup-vscode-kind-icons)
    (with-eval-after-load 'corfu
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))
#+end_src

* Modeline

** COMMENT Use variable font
#+begin_src emacs-lisp
    (custom-set-faces
     '(mode-line ((t :inherit variable-pitch)))
     '(mode-line-inactive ((t :inherit variable-pitch))))
#+end_src

** Diminish
Hide unnecessary lighters.
#+begin_src emacs-lisp
  (use-package diminish
    :config
    (diminish 'gcmh-mode)
    (diminish 'buffer-face-mode))
#+end_src

** Meow Colorful Indicator

#+begin_src emacs-lisp
  (custom-set-faces
   '(meow-beacon-indicator ((t (:background "#FF8800" :foreground "white"))))
   '(meow-keypad-indicator ((t (:background "#ffc86f" :foreground "white"))))
   '(meow-motion-indicator ((t (:background "#51afef" :foreground "white"))))
   '(meow-normal-indicator ((t (:background "#51afef" :foreground "white"))))
   '(meow-search-indicator ((t (:background "#c678dd" :foreground "white")))))
#+end_src
* Org faces

** org-mode
#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-hide-emphasis-markers t
        org-fontify-done-headline t
        org-fontify-whole-heading-line t
        org-fontify-quote-and-verse-blocks t
        org-ellipsis "  " ;; folding symbol
        org-src-tab-acts-natively t)
#+end_src
*** COMMENT org fonts
#+begin_src emacs-lisp
  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src
*** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern
    :hook
    ((org-mode . org-modern-mode)
     (org-agenda-finalize-hook . org-modern-agenda)))
#+end_src
*** COMMENT Using variable pitch font

Enable ~variable-pitch-mode~.

#+begin_src emacs-lisp

  ;; (use-package mixed-pitch
  ;;   :hook
  ;;   (org-mode . mixed-pitch-mode))

  (with-eval-after-load "org"
    ;; Use fixed pitch for table and code
    (custom-set-faces
     '(variable-pitch ((t :font-family "Sarasa Gothic CL")))
     '(org-table ((t :inherit 'fixed-pitch-serif)))
     '(org-code ((t :inherit 'fixed-pitch-serif)))
     '(org-block ((t :inherit 'fixed-pitch-serif)))
     '(org-checkbox ((t :inherit 'fixed-pitch :background nil :box nil)))
     '(org-latex-and-related ((t (:inherit 'fixed-pitch-serif))))))
#+end_src

*** Prevent org source block face from bleeding out in fold
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; 获取当前主题的背景色
    (defun get-theme-background-color ()
      (cdr (assoc 'background-color (frame-parameters))))

    (defun set-org-block-end-line-color ()
      "Set org-src-block face background color to current theme's background color."
      (interactive)
      (let ((background-color (get-theme-background-color))) ; 获取当前主题的背景色
        (set-face-attribute 'org-block-end-line nil :background background-color))) ; 设置 org-src-block face 的背景色属性

    (advice-add 'load-theme :after (lambda (&rest _) (set-org-block-end-line-color))))

#+end_src
*** Keyword face
#+begin_src emacs-lisp
  ;; (setq org-todo-keyword-faces '(("TODO" . (:foreground "#95A5A6" :background "white" :weight 'bold))
  ;;                                ("HACK" . (:foreground "#2E8B57" :weight 'bold))
  ;;                                ("NEXT" . (:foreground "cyan" :weight 'bold))
  ;;                                ("FIXME" . (:foreground "red" :weight 'bold))
  ;;                                ("DONE" . (:foreground "#3498DB" :weight 'bold))))
  (setq org-todo-keyword-faces '(("TODO" . warning)
                                 ("DOING" . success)
                                 ("WAITING" . error)
                                 ("VERIFY" . error)
                                 ("DONE" . shadow)
                                 ("CANCEL" . shadow)))
#+end_src

* End
#+begin_src emacs-lisp
  (provide 'laf)
  ;;; laf.el ends here
#+end_src

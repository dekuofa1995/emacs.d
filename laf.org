#+title: Look & Feel

Configuration for look and feels, make UI looks better.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Disable emacs components

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

* Enable window divider
#+begin_src emacs-lisp
  (window-divider-mode 1)
#+end_src

* UI related variables

#+begin_src emacs-lisp
  (setq x-underline-at-descent-line t)
#+end_src

* Fonts

** Fonts Families

Default variables

#+begin_src emacs-lisp
  (defvar meomacs-font-size 20
    "Current font size")


  (defvar meomacs-theme '((default . "Source Code Pro")
		     (cjk . "Unifont")
		     (symbol . "Unifont")
		     (fixed . "Source Code Pro")
		     (fixed-serif . "Cousine Nerd Font")
		     (variable . "Source Code Pro Itaic")
		     (wide . "Source Code Pro Medium")
		     (tall . "Source Code Pro Light"))
    "Fonts to use.")
#+end_src

  Define functions for loading fonts
  Font families are specified in [[file:private.org::Fonts][private]] config.
- FIXME ~modeline~'s face override by somewhere in init phrase.
 #+begin_src emacs-lisp
   ;; (defun meomacs--get-font-family (key)
   ;;   (let ((font (alist-get key meomacs-fonts)))
   ;;     (if (string-empty-p font)
   ;;         (alist-get 'default meomacs-fonts)
   ;;       font)))

   ;; (defun meomacs-load-default-font ()
   ;;   "Load default font configuration."
   ;;   (let ((default-font (format "%s-%s"
   ;;                               (meomacs--get-font-family 'default)
   ;;                               meomacs-font-size)))
   ;;     (add-to-list 'default-frame-alist (cons 'font default-font))))

   ;; (defun meomacs-load-face-font ()
   ;;   "Load face font configuration."
   ;;   (let ((variable-font (meomacs--get-font-family 'variable))
   ;;         (fixed-font (meomacs--get-font-family 'fixed))
   ;;         (fixed-serif-font (meomacs--get-font-family 'fixed-serif)))
   ;;     (set-face-attribute 'variable-pitch nil :family variable-font)
   ;;     (set-face-attribute 'fixed-pitch nil :family fixed-font)
   ;;     (set-face-attribute 'fixed-pitch-serif nil :family fixed-serif-font)))
   ;; (add-hook 'after-init-hook (lambda ()
   ;;                              (set-face-attribute 'mode-line-active nil :background "white")
   ;;                              (custom-set-faces
   ;;                               '(mode-line-active ((t (:background "white")))))))


   ;; (defun meomacs-load-charset-font (&optional font)
   ;;   "Load charset font configuration."
   ;;   (let ((default-font (or font (format "%s-%s"
   ;; 				       (meomacs--get-font-family 'default)
   ;; 				       meomacs-font-size)))
   ;; 	(cjk-font (meomacs--get-font-family 'cjk))
   ;; 	(symbol-font (meomacs--get-font-family 'symbol)))
   ;;     (set-frame-font default-font)
   ;;     (let ((fontset (create-fontset-from-ascii-font default-font)))
   ;;       ;; Fonts for charsets
   ;;       (dolist (charset '(kana han hangul cjk-misc bopomofo))
   ;; 	(set-fontset-font fontset charset cjk-font))
   ;;       (set-fontset-font fontset 'symbol symbol-font)
   ;;       ;; Apply fontset
   ;;       (set-frame-parameter nil 'font fontset)
   ;;       (add-to-list 'default-frame-alist (cons 'font fontset)))))

   ;; (meomacs-load-default-font)
   ;; (meomacs-load-face-font)

   ;; ;; Run after startup
   ;; (add-hook 'after-init-hook
   ;; 	  (lambda ()
   ;; 	    (when window-system
   ;; 	      (meomacs-load-charset-font))))

   ;; Font
   (defun font-installed-p (font-name)
     "Check if font with FONT-NAME is available."
     (find-font (font-spec :name font-name)))
   (defun centaur-setup-fonts ()
     "Setup fonts."
     (when (display-graphic-p)
       ;; Set default font
       (cl-loop for font in '("Menlo" "Cascadia Code" "Menlo" "SF Mono" "Fira Code"
                              "Jetbrains Mono" "Hack"
                              "Monaco" "DejaVu Sans Mono" "Consolas")
                when (font-installed-p font)
                return (set-face-attribute 'default nil
                                           :family font
                                           :height 200))
       (set-fontset-font t 'han (font-spec :family "LXGW WenKai" :height 180
                                           :weight 'bold))
       (set-face-attribute 'default nil :family "Menlo" :height 200)
       (set-face-attribute 'font-lock-function-name-face nil :weight 'bold)
       (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

       ;; (set-face-attribute 'font-lock-comment-face nil :font "LXGW WenKai")
       ;; (dolist (charset '(kana han cjk-misc bopomofo unicode))
         ;; (set-fontset-font "fontset-modeline fontset"  charset
         ;;                   (font-spec :family "InconsolataGo QiHei NF")))
       ;; (set-fontset-font "fontset-modeline fontset" 'ascii
       ;;                   (font-spec :family "Cascadia Mono"))

       ;; 中文测试
       ;; Set mode-line font
       (cl-loop for font in '("Menlo" "SF Pro Display" "Helvetica")
                when (font-installed-p font)
                return (progn
                         (set-face-attribute 'mode-line nil :family font)
                         (when (facep 'mode-line-active)
                           (set-face-attribute 'mode-line-active nil :family font :height 140 :weight 'medium))
                         (set-face-attribute 'mode-line-inactive nil :family font :height 140)))

       ;; Specify font for all unicode characters
       (cl-loop for font in '("Segoe UI Symbol" "Symbola" "Symbol")
                when (font-installed-p font)
                return (set-fontset-font t 'unicode font nil 'prepend))

       ;; Emoji
       (cl-loop for font in '("Noto Color Emoji" "Apple Color Emoji")
                when (font-installed-p font)
                return (if (>= emacs-major-version 28)
                           (set-fontset-font t 'emoji (font-spec :family font) nil 'prepend)
                         (set-fontset-font t 'symbol (font-spec :family font) nil 'prepend)))

       ;; Specify font for Chinese characters
       (cl-loop for font in '("LXGW WenKai" "WenQuanYi Micro Hei" "PingFang SC" "Microsoft Yahei" "STFangsong")
                when (font-installed-p font)
                return (progn
                         (setq face-font-rescale-alist `((,font . 1.2)))
                         (set-fontset-font t '(#x4e00 . #x9fff) (font-spec :family font))))
       ))

   (centaur-setup-fonts)
   ;; (defun setup-chinese-font-face ()
   ;;   (set-fontset-font t 'han (font-spec :family "LXGW WenKai" :height 180
   ;;                                       :weight 'bold)))
   (advice-add 'meomacs-load-theme :after  #'centaur-setup-fonts)
   ;; (add-hook 'after-init-hook #'setup-chinese-font-face)
   (add-hook 'window-setup-hook #'centaur-setup-fonts)
   (add-hook 'server-after-make-frame-hook #'centaur-setup-fonts)
#+end_src

*** TODO COMMENT Fira Code
#+begin_src emacs-lisp
  (when (window-system)
    (set-frame-font "Fira Code"))

  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
		 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
		 (36 . ".\\(?:>\\)")
		 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
		 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
		 (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
		 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
		 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
		 (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
		 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
		 (48 . ".\\(?:x[a-zA-Z]\\)")
		 (58 . ".\\(?:::\\|[:=]\\)")
		 (59 . ".\\(?:;;\\|;\\)")
		 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
		 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
		 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
		 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
		 (91 . ".\\(?:]\\)")
		 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
		 (94 . ".\\(?:=\\)")
		 (119 . ".\\(?:ww\\)")
		 (123 . ".\\(?:-\\)")
		 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
		 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
		 )
	       ))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
			    `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+end_src


*** Variables used when spliting window
#+begin_src emacs-lisp
  (defvar meomacs-font-current-variant nil)

  (defun meomacs-dynamic-set-font (&rest ignore)
    (interactive)
    (when (or (frame-root-window-p (get-buffer-window))
              (frame-root-window-p (window-parent)))
      (let* ((prev-font-style meomacs-font-current-variant)
             (wl (seq-filter (lambda (w) (not (string-prefix-p " " (buffer-name (window-buffer w))))) (window-list)))
             (def (meomacs--get-font-family 'default))
             (new-variant (cond
                              ((= 1 (length wl))
                               (meomacs--get-font-family 'default))

                              ((window-combined-p)
                               (meomacs--get-font-family 'tall))

                              (t
                               (meomacs--get-font-family 'wide)))))
        (unless (equal prev-font-style new-variant)
          (setq meomacs-font-current-variant new-variant)
          (set-frame-font new-variant)
          (meomacs-load-charset-font new-variant)))))

  (setq frame-inhibit-implied-resize t)
  ;; (add-hook 'window-state-change-hook 'meomacs-dynamic-set-font)
#+end_src

* TODO Themes

Create a command ~meomacs-next-theme~ to switch themes.

#+begin_src emacs-lisp
  (require 'subr-x)
  (require 'cl-lib)
  (require 'color)

  (defvar meomacs-themes '()
    "Themes to use.")

  (defun meomacs-load-theme ()
    (when-let ((theme (car meomacs-themes)))
      (message "Load theme: %s" (car meomacs-themes))
      (mapc 'disable-theme custom-enabled-themes)
      (unless (eq theme 'default)
	(load-theme theme t))))

  (defun meomacs-next-theme ()
    (interactive)
    (when meomacs-themes
      (setq meomacs-themes (append (cdr meomacs-themes) (list (car meomacs-themes))))
      (meomacs-load-theme)))

  (add-hook 'desktop-after-read-hook 'meomacs-load-theme)
#+end_src

** doom-themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-treemacs-theme "doom-colors") ;; enable color icons in treemacs
    :config
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+end_src

** kaolin-themes
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :defer t
    :config
    (kaolin-treemacs-theme))
#+end_src

** Icons
*** Nerd Icons
#+begin_src emacs-lisp
  (use-package nerd-icons :defer t)
#+end_src

**** Nerd Icon for Dired
#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :defer t
    :straight (nerd-icons-dired :type git :host github :repo "rainstormstudio/nerd-icons-dired")
    :hook (dired-mode . nerd-icons-dired-mode))
#+end_src

*** Kind Icon
#+begin_src emacs-lisp
  (use-package kind-icon
    :defer t
    :ensure t
    :after corfu
    :custom
    ;; fix kind icon to large bug
    (kind-icon-default-style '(:padding -1 :stroke 0 :margin 0 :radius 0 :height 0.6 :scale 1.0))
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

*** COMMENT all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-verbatimp))
#+end_src

* Modeline

** COMMENT Use variable font
#+begin_src emacs-lisp
    (custom-set-faces
     '(mode-line ((t :inherit variable-pitch)))
     '(mode-line-inactive ((t :inherit variable-pitch))))
#+end_src

** Diminish
Hide unnecessary lighters.
#+begin_src emacs-lisp
  (use-package diminish
    :config
    (diminish 'gcmh-mode)
    (diminish 'buffer-face-mode)
    (diminish 'eldoc-mode))
#+end_src

** Meow Colorful Indicator

#+begin_src emacs-lisp
  (custom-set-faces
   '(meow-beacon-indicator ((t (:background "#FF8800" :foreground "white"))))
   '(meow-keypad-indicator ((t (:background "#ffc86f" :foreground "white"))))
   '(meow-motion-indicator ((t (:background "#51afef" :foreground "white"))))
   '(meow-normal-indicator ((t (:background "#51afef" :foreground "white"))))
   '(meow-search-indicator ((t (:background "#c678dd" :foreground "white")))))
#+end_src
* Org faces

** org-mode

#+begin_src emacs-lisp

  (setq org-startup-indented t
        org-hide-emphasis-markers t
        org-fontify-done-headline t
        org-fontify-whole-heading-line t
        org-fontify-quote-and-verse-blocks t
        org-ellipsis "  " ;; folding symbol
        org-src-tab-acts-natively t)

#+end_src
*** org fonts
#+begin_src emacs-lisp
  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

*** Prevent org source block face from bleeding out in fold
#+begin_src emacs-lisp
  ;; 获取当前主题的背景色
  (defun get-theme-background-color ()
    (cdr (assoc 'background-color (frame-parameters))))

  (defun set-org-block-end-line-color ()
    "Set org-src-block face background color to current theme's background color."
    (interactive)
    (let ((background-color (get-theme-background-color))) ; 获取当前主题的背景色
      (set-face-attribute 'org-block-end-line nil :background background-color))) ; 设置 org-src-block face 的背景色属性

  (advice-add 'consult-theme :after (lambda (&rest args) (set-org-block-end-line-color)))

#+end_src
*** COMMENT Keyword face
#+begin_src emacs-lisp
  (setf org-todo-keyword-faces '(("TODO" . (:foreground "#95A5A6" :background "white" :weight 'bold))
                                 ("HACK" . (:foreground "#2E8B57" :weight 'bold))
                                 ("NEXT" . (:foreground "cyan" :weight 'bold))
                                 ("FIXME" . (:foreground "red" :weight 'bold))
                                 ("DONE" . (:foreground "#3498DB" :weight 'bold))))
#+end_src

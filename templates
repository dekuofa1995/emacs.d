
fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

latex-mode org-latex-preview-auto-mode

(abstract "\\begin{abstract}\n" r> n> "\\end{abstract}")
(align "\\begin{align}\n" r> n> "\\end{align}")
(alignn "\\begin{align*}\n" r> n> "\\end{align*}")
(gather "\\begin{gather}\n" r> n> "\\end{gather}")
(gatherr "\\begin{gather*}\n" r> n> "\\end{gather*}")
(appendix "\\begin{appendix}\n" r> n> "\\end{appendix}")
(begin "\\begin{" (s env) "}" r> n> "\\end{" (s env) "}")
(center "\\begin{center}\n" r> n> "\\end{center}")
(displaymath "\\begin{displaymath}\n" r> n> "\\end{displaymath}")
(document "\\begin{document}\n" r> n> "\\end{document}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(equation "\\begin{equation}" r> n> "\\end{equation}")
(flushleft "\\begin{flushleft}" r> n> "\\end{flushleft}")
(flushright "\\begin{flushright}" r> n> "\\end{flushright}")
(frac "\\frac{" p "}{" q "}")
(fussypar "\\begin{fussypar}" r> n> "\\end{fussypar}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")
(letter "\\begin{letter}\n" r> n> "\\end{letter}")
(math "\\begin{math}\n" r> n> "\\end{math}")
(minipage "\\begin{minipage}[t]{0.5\linewidth}\n" r> n> "\\end{minipage}")
(quotation "\\begin{quotation}\n" r> n> "\\end{quotation}")
(quote "\\begin{quote}\n" r> n> "\\end{quote}")
(sloppypar "\\begin{sloppypar}\n" r> n> "\\end{sloppypar}")
(theindex "\\begin{theindex}\n" r> n> "\\end{theindex}")
(trivlist "\\begin{trivlist}\n" r> n> "\\end{trivlist}")
(verbatim "\\begin{verbatim}\n" r> n> "\\end{verbatim}")
(verbatimm "\\begin{verbatim*}\n" r> n> "\\end{verbatim*}")

texinfo-mode

(defmac "@defmac " p n> r> "@end defmac")
(defun "@defun " p n> r> "@end defun")
(defvar "@defvar " p n> r> "@end defvar")
(example "@example " p n> r> "@end example")
(lisp "@lisp " p n> r> "@end lisp")
(bullet "@itemize @bullet{}" n> r> "@end itemize")
(code "@code{" p "}")
(var "@var{" p "}")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(whilelet "(while-let (" p ")" n> r> ")")
(andlet "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(lett "(let* (" p ")" n> r> ")")
(pcaselet "(pcase-let (" p ")" n> r> ")")
(pcaselett "(pcase-let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(header ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
        " -- " q " -*- lexical-binding: t -*-" n
        ";;; Commentary:" n ";;; Code:" n n)
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
         " ends here" n)

eshell-mode

(for "for " (p "i") " in " p " { " q " }")
(while "while { " p " } { " q " }")
(until "until { " p " } { " q " }")
(if "if { " p " } { " q " }")
(ife "if { " p " } { " p " } { " q " }")
(unl "unless { " p " } { " q " }")
(unle "unless { " p " } { " p " } { " q " }")

text-mode

(box "┌─" (make-string (length str) ?─) "─┐" n
     "│ " (s str)                       " │" n
     "└─" (make-string (length str) ?─) "─┘" n)
(abox "+-" (make-string (length str) ?-) "-+" n
      "| " (s str)                       " |" n
      "+-" (make-string (length str) ?-) "-+" n)
(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)
(rot13 (p "plain text" text) n "----" n (rot13 text))
(calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))

rst-mode

(title (make-string (length title) ?=) n (p "Title: " title) n (make-string (length title) ?=) n)

java-mode java-ts-mode

(class "public class " (p (file-name-base (or (buffer-file-name) (buffer-name)))) " {" n> r> n "}")

c-mode c-ts-base-mode :when (re-search-backward "^\\S-*$" (line-beginning-position) 'noerror)

(incc "#include \"" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) "\"")
(inc "#include <" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) ">" n q)
(sio "#include <stdio.h>" n q)
(def "#define " (s NAME) " " (p "0") n> q)
(main "int main(int argc, char* argv[]) { " n> q n " return 0;" n "}")
(func (s RETURN) " " (s F_NAME) "(" (s F_ARGS) ") { " n> q n " return 0;" n "}")

html-mode mthml-mode
(html "<!DOCTYPE html>
<html lang='zh'>
  <head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'
    <title>"(s NAME)"</title>
  </head>
  <body>

  </body>
</html>")
org-mode

(myconfig "* Header" n
	  "#+begin_src emacs-lisp" n>
	  ";;; " (deku/org-conf-file-name) ".el -- Deku Init File. -*- lexical-binding: t -*-" n
	  ";;; Commentary:" n n
	  "#+end_src" n n
	  "* Configuration" q n n
	  "* Footer " n
	  "#+begin_src emacs-lisp" n>
	  "(provide '" (deku/org-conf-file-name) ")" n
	  ";;; " (deku/org-conf-file-name) ".el ends here" n
	  "#+end_src" n)
(caption "#+caption: ")
(drawer ":" p ":" n r ":end:")
(begin "#+begin_" (s name) n> r> n "#+end_" name)
(quote "#+begin_quote" n> r> n "#+end_quote")
(sidenote "#+begin_sidenote" n> r> n "#+end_sidenote")
(marginnote "#+begin_marginnote" n> r> n "#+end_marginnote")
(example "#+begin_example" n> r> n "#+end_example")
(center "#+begin_center" n> r> n "#+end_center")
(ascii "#+begin_export ascii" n> r> n "#+end_export")
(html "#+begin_export html" n> r> n "#+end_export")
(latex "#+begin_export latex" n> r> n "#+end_export")
(comment "#+begin_comment" n> r> n "#+end_comment")
(verse "#+begin_verse" n> r> n "#+end_verse")
(src "#+begin_src " q n> r> n "#+end_src")
(gnuplot "#+begin_src gnuplot :var data=" (p "table") " :file " (p "plot.png") n> r> n "#+end_src" :post (org-edit-src-code))
(elisp "#+begin_src emacs-lisp" n> r> n "#+end_src" :post (org-edit-src-code))
(python "#+begin_src python" n> r> n "#+end_src" :post (org-edit-src-code))
(inlsrc "src_" p "{" q "}")
(title "#+title: " p n "#+author: Daniel Mendler" n "#+language: en")

clojure-mode :when (and (eq "build.clj" (buffer-name))
												(re-search-backward "^\\S-*$" (line-beginning-position) 'noerror))

(build "(ns build
  (:require [clojure.tools.build.api :as b]
            [clojure.edn :as edn]))

(def project
  (-> (edn/read-string (slurp \"deps.edn\")) :project))
(def lib (:name project))

(def version (:version project))
(def class-dir \"target/classes\")
(def basis (delay (b/create-basis {:project \"deps.edn\"})))
(def uber-file (format \"target/%s-%s-standalone.jar\" (name lib) version))
(def jar-file (format \"target/%s-%s.jar\" (name lib) version))

(defn clean [_] (b/delete {:path \"target\"}))
(defn jar
  [_]
  (clean nil)
  (b/write-pom {:class-dir class-dir,:lib lib,:version version,:basis @basis,:src-dirs [\"src\"]})
  (b/copy-dir {:src-dirs [\"src\" \"resources\"], :target-dir class-dir})
  (b/compile-clj {:basis @basis, :src-dirs ["src"], :class-dir class-dir})
  (b/jar {:class-dir class-dir, :jar-file jar-file}))

(defn install
  [_]
  (jar {})
  (b/install {:basis @basis, :lib lib, :version version, :jar-file jar-file, :class-dir class-dir}))
(defn uber
  [_]
  (clean nil)
  (b/copy-dir {:src-dirs [\"src\" \"resources\"], :target-dir class-dir})
  (b/compile-clj {:basis @basis, :src-dirs [\"src\"], :class-dir class-dir})
  (b/uber {:class-dir class-dir, :uber-file uber-file, :basis basis}))
(defn deploy
  [opts]
  (jar opts)
  ((requiring-resolve 'deps-deploy.deps-deploy/deploy)
    (merge {:installer :local, :artifact jar-file, :pom-file (b/pom-path {:lib lib, :class-dir class-dir})}opts))opts)
")

clojure-mode :when (eq "deps.edn" (buffer-name))
(js-deps "{:builds
   {:app {:modules {:devtools {:after-load "(s LIB)"/after-load,
                               :http-port 8000,
                               :preloads [com.fulcrologic.fulcro.inspect.preload
                                          shadow.remote.runtime.cljs.browser]},
                    :main {:init-fn "(s LIB)"/init}},
          :output-dir \"resources/public/js\",
          :target :browser},
    :test {:devtools {:http-port 8021, :http-root \"resources/public/js/test\"},
           :target :browser-test,
           :test-dir \"resources/public/js/test\"}},
 :deps {:aliases []}}
")
(deps "{:aliases {:build ;; added by neil
             {:deps {io.github.clojure/tools.build {:git/sha \"8e78bcc\",
                                                    :git/tag \"v0.9.6\"},
                     slipset/deps-deploy {:mvn/version \"0.2.0\"}},
              :ns-default build}},
 :deps {},
 :project {:name "(s PROJECT)", :version "(s VERSION)"}}")
(mvn "{:mvn/version \"" (s VERSION) "\"}")

clojurescript-mode
(sout "(js/console.log "(s OBJ)")")


;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
